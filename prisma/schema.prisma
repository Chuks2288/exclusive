generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  ipAddress     String?
  loginDate     DateTime?
  loginDevice   String?

  // Personal and shipping details
  firstName   String?
  lastName    String?
  // phoneNumber String?
  homeAddress Address? // Optional billing address if different from homeAddress

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account       Account[]
  ProductReview ProductReview[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id          String  @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String?
  apartment   String?
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model FlashSalesProduct {
  id             String   @id @default(cuid())
  productId      String
  discountAmount Float
  validUntil     DateTime
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId])
}

model Product {
  id              String           @id @default(cuid())
  name            String
  description     String
  price           Float
  initialPrice    Float
  currency        String
  brand           String
  category        String
  subcategory     String
  availability    String
  stockQuantity   Int
  images          String[]
  ratingId        String?          @unique
  rating          Rating?          @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  features        String[]
  specificationId String?          @unique
  specifications  Specification?   @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  discount        Discount?
  discountId      String?          @unique
  relatedProducts RelatedProduct[]
  reviewsId       String?
  reviews         ProductReview[]
  shippingId      String?          @unique
  shipping        Shipping?        @relation(fields: [shippingId], references: [id], onDelete: Cascade)
  returnPolicyId  String?          @unique
  returnPolicy    ReturnPolicy?    @relation(fields: [returnPolicyId], references: [id], onDelete: Cascade)
  warrantyId      String?          @unique
  warranty        Warranty?        @relation(fields: [warrantyId], references: [id], onDelete: Cascade)
  isNew           Boolean          @default(false)

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  FlashSalesProduct FlashSalesProduct?
}

model Rating {
  id      String   @id @default(cuid())
  average Float
  reviews Int
  product Product? // No `fields` or `onDelete`
}

model Specification {
  id           String   @id @default(cuid())
  weight       String
  dimensions   String
  color        String?
  material     String?
  connectivity String?
  packaging    String?
  storage      String?
  product      Product? // No `fields` or `onDelete`
}

model Discount {
  id         String   @id @default(cuid())
  amount     Int
  type       String
  validUntil DateTime
  productId  String   @unique
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model RelatedProduct {
  id               String  @id @default(cuid())
  productId        String
  relatedProductId String
  relatedProduct   Product @relation(fields: [relatedProductId], references: [id], onDelete: Cascade)

  @@unique([productId, relatedProductId]) // Enforce uniqueness
}

model ProductReview {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Shipping {
  id           String   @id @default(cuid())
  weight       String
  dimensions   String
  cost         Float
  deliveryTime String
  product      Product? // No `fields` or `onDelete`
}

model ReturnPolicy {
  id           String   @id @default(cuid())
  returnable   Boolean
  returnPeriod String
  conditions   String
  product      Product? // No `fields` or `onDelete`
}

model Warranty {
  id       String   @id @default(cuid())
  duration String
  coverage String
  product  Product? // No `fields` or `onDelete`
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
